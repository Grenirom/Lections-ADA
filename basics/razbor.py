"==============================Типы данных в python============================"
# immutable - неизменяемые типы данных (int, float, str, None, Bool, tuple, frozenset)
# mutable - изменяемые (dict, list, set)

'=================================Numbers=================================='
# числа - неизменяемый тип данных, для хранения числовых значений и проведения над ними арифметических действий

# int # целые числа
# float # вещественные числа, дробные, десятичные, с плавающей точкой
# decimal # десятичные, более точные
# complex # комплексные числа 6 + 5j + 3e
# long # огромные числа
# print(dir(int))

# строки - неизменяемый тип данных, который представляет собой упорядоченную последовательность символов, заключенных в одинарные или двойные кавычки

str_ = 'kfsjdmlc'
str2 = 'hello'

"===============================Индексы============================="

string ='hello world'

string[0]
string[-1]
string[::-1]
string[0:5]
string[-5]

list_ = ['hello', True, None, False, 34, [{'а': 3, 'b': [{"d": 234, 'c': [1,2,3]}]}]]
list_[0]
print(list_[-1])
"=====================================List=================================="
# список - изменяемый, итерируемый, упорядоченный тип данных, который хранит в себе последовательность элементов
list_ = [1, 2, 3, 4, 5, 6, True, None, None]
"==================================Tuple====================================="
# кортеж - неизменяемый список, который хранит в себе последовательность элементов
tuple_ = 1,2,3,4,5,6 # (1,2,3,4,5,6)
tuple1 = (1) #int
tuple2 = (1,) # tuple
tuple3 = 1,
"=============================Set=========================================="
# множество - изменяемый, неупорядоченный тип который хранит в себе только уникальные значения 

set_ = {1, 2, 3, 4, 4, 4, 4, 4,4,4} # {1, 2, 3, 4}
# для set 1 == True, 0 == False
set2 = {1, 0, True, False} # {0, 1}
print(set2)
set3 = {} #dict
set4 = set() # set

"=========================Frozenset============================="
# неизменяемое множество
f_set = frozenset([1, 2, 2, 2, 4, 5, 6, 7, 8]) # {{1, 2, 4, 5, 6, 7, 8}}
# все методы, которые были у set для изменения, во frozenset отсутствуют
print(dir(frozenset))

'===================================Dictionary==============================='
# словарь - изменяемый, неупорядоченный тип данных, для хранения данных в паре {ключ: значение}
# ключ - должен быть неизменяемым типом данных
# если ключом будет tuple, то в нем тоже должны быть только неизменяемые типы данных
# если ключ повторяется, то значение перезаписывается на последнее

dict1 = {'a': 1, 'b': 5, 'a': 3} # {'a': 3, 'b': 5}

"=====================Bool==========================="
# bool - логический тип данных, с двумя значениями (True, False)

'===========================None==========================='
# None - тип данных, для обозначения пустоты

'=====================================Условные операторы========================'
# условные - конструкция, которая позволяет выполнять или не выполнять какой то кусочек кода, который находится в теле условия

# if True:
#     pass
# elif None:
#     pass
# else:
#     pass

'================================Тернарные операторы========================'
# тернарный оператор - условие, которое написано в одну строку, и возвращает одно из двух результатов в зависимости от условия 
'res' if True else 'Res2'
'==================================Циклы================================='
# цикл - конструкция которая позволяет циклично пройтись по итерируемому объекту(str, list, set, dict, tuple, range). В цикле for мы выполняем операции наж каждым элементом итерируемого объекта
# итерация - одно прохождение цикла
# итериуремый объект - объект по которому можно пройтись циклом for
#break - прерывает работу цикла
# continue - пропускает 1 итерацию

list1 = [1,23,3, 4, 5, 6, 7]
for elem in list1:
    print(elem)

'===============================while================================='
# цикл, который повторяет код пока условие True (верное) (может быть бесконечным)

# n = 10
# while n < 100:
#     print(n)
#     n += 1


# Напишите функцию func(employees: dict) -> dict, которая принимает на вход список словарей, где каждый словарь представляет сотрудника с ключами "salary" (зарплата) и "overTime" (переработка в часах). Функция должна пересчитать зарплату каждого сотрудника, добавив к текущей зарплате 200 за каждый час переработки, и вернуть обновленный список сотрудников, удалив из каждого словаря ключ "overTime".
employees = [
    {"name": "Alice", "salary": 3000, "overTime": 10},
    {"name": "Bob", "salary": 2500, "overTime": 5},
    {"name": "Charlie", "salary": 4000, "overTime": 0}
]


# def func(employees: dict) -> dict:
#     result = []
#     BONUS = 200

#     for employee in employees:
#         modified_salary = employee['salary'] + employee['overTime'] * BONUS
#         employee.update({"salary": modified_salary})
#         employee.pop('overTime')
#         result.append(employee)

#     return result

# print(func(employees))

#  Напишите функцию func2(ints_and_strs: list) -> None, которая принимает список, содержащий целые числа и строки. Функция должна разделить элементы списка на два отдельных списка: один для целых чисел и один для строк. Функция должна вернуть два списка.

# list_ = [1, 2, 3, 4, 5, 6, 7, 'hello', 'world', 'my', 'name', 'is', 'nikita']

# def func2(ints_and_strs: list):
#     int_list = []
#     str_list = []

#     for i in ints_and_strs:
#         if type(i) == int:
#             int_list.append(i)
#         elif type(i) == str:
#             str_list.append(i)

#     return int_list, str_list
# a, b = 7, 10
# int_list, str_list = func2(list_)
# print(int_list)
# print(str_list)

# Напишите функцию func3(products: list, title: str) -> list, которая принимает список словарей, представляющих продукты, и строку, представляющую часть названия продукта. Функция должна вернуть список продуктов, в названии которых содержится указанная строка.

# products = [
#     {"title": "Apple Juice", "price": 2.5},
#     {"title": "Orange Juice", "price": 3.0},
#     {"title": "Grape Juice", "price": 4.0},
#     {"title": "Apple Juice", "price": 2.5},
#     {"title": "Apple Juice", "price": 2.5},
# ]

# def func3(products: list, title: str):
#     filtered_data = [product for product in products if title.lower() in product.get('title').lower()]

#     return filtered_data

# print(func3(products, 'Apple Juice'))


